# create single linked list

class Node():
    def __init__(self,data):
        self.data=data
        self.next=None
class LL():
    def __init__(self):
        self.head=None
    
    # insert node form head
    def insertAtStart(self,data):
        curr=self.head
        newNode=Node(data)
        if (curr is None):
            self.head=newNode
        else:
            self.head,newNode.next=newNode,self.head
    
    # print element in linked list
    def printLL(self):
        curr=self.head
        while(curr):
            print(curr.data)
            curr=curr.next
        print("______________-")
    
    # reverse linked list
    def Reversal(self):
        curr=self.head
        Next=None
        prev=None
      
        while(curr):
            
            Next=curr.next
            curr.next=prev
            prev=curr
            curr=Next
        self.head=prev
    
    def creatingCycle(self):
        curr=self.head
        curr=curr.next #3
        temp_3=curr
        curr=curr.next
        curr=curr.next #11
        curr.next=temp_3
        temp_3.next=curr.next
        
    # detecting cycle in ll
    def CycleDetection(self):
        fast=self.head
        slow=self.head
        while(slow !=None and fast!=None and fast.next!=None):
            slow=slow.next
            fast=fast.next.next
            if (fast==slow):
                print("cycle is Present")
                return
        print("not present")
        return
    
    # deletion of nodes by position
    def Deletion(self,pos):
        count=1
        prev=None
        curr=self.head
        if pos==1:
            self.head=self.head.next
            return
        while(pos!=count and curr):
            prev=curr
            curr=curr.next
            count+=1
        prev.next=curr.next
    
    # count No.of Nodes in a Linked List
    
    def Count(self):
        curr=self.head
        count=0
        while( curr is not None):
            count+=1
            curr=curr.next
        return count
    
    # searching Element in LL
    def Search(self,element):
        curr=self.head
        while(curr):
            if (curr.data==element):
                return 1
            curr=curr.next
        return 0
        
    def mergeList(self,head1,head2):
        curr1=head1.head
        curr2=head2.head
        curr3=self.head
        while(curr2 and curr1):
            # print("j")
            if (curr3):
                
                if(curr1.data>curr2.data):
                    newNode=Node(curr2.data)
                    curr3.next=newNode
                    curr2=curr2.next
                    curr3=curr3.next
                    # print(curr3.data,"i",curr3)
                else:
                    
                    newNode=Node(curr1.data)
                    curr3.next=newNode
                    curr1=curr1.next
                    curr3=curr3.next
                    # print(curr3.data,"k",curr3)
            else:
                if(curr1.data>curr2.data):
                    # self.insertAtStart(curr2.data)
                    newNode=Node(curr2.data)
                    self.head=newNode
                    curr3=self.head
                    curr2=curr2.next
                    
                    # print(curr3.data,"jbj",curr3)
                else:
                    
                    newNode=Node(curr1.data)
                    
                    self.head=newNode
                    curr3=self.head
                    curr1=curr1.next
                    
        
        while(curr2):
            newNode=Node(curr2.data)
            curr2=curr2.next
            curr3.next=newNode
        while(curr1):
            newNode=Node(curr1.data)
            curr3.next=newNode
            curr1=curr1.next
        self.printLL()
        
        
            
            
    
L=LL()
L.insertAtStart(40)
L.insertAtStart(30)
L.insertAtStart(20)
L.insertAtStart(12)
L.printLL()
# L.Reversal()
# deletion of node by postion
# L.Deletion(1)
# L.printLL()
# count no of Node
# print(L.Count())
# print(L.Search(1))

# second LL
L2=LL()
L2.insertAtStart(44)
L2.insertAtStart(33)
L2.insertAtStart(22)
L2.insertAtStart(11)
L2.printLL()
L3=LL()

L3.mergeList(L,L2)
